---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Elasticache: Redis Server, Options for HA'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentVPCStack
    - Label:
        default: 'EC2 Parameters'
      Parameters:
      - InstanceType
      - Name
      - SubnetName
      - SSHAccessGroup
      - SSHAccessCIDR
      - HighAvailability
    - Label:
        default: 'High Availability Config'
      Parameters:
      - HighAvailability
      - Replicas
    - Label:
        default: 'Version Info'
      Parameters:
      - MinorUpgrade
      - EngineVersion
Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc.yml template.'
    Type: String
  InstanceType:
    Description: 'The instance type for the Redis Instance.'
    Type: String
    Default: 'cache.t2.micro'
  Name:
    Description: 'The name for the Redis Instance.'
    Type: String
    Default: ''
  RedisAccessGroup:
    Description: '(Optional) Redis Access Security Group Name'
    Type: String
    Default: ''
  RedisAccessCIDR:
    Description: '(Optional) Redis Access IP address CIDR, If no Security Group Specified'
    Type: String
    Default: ''
  SubnetName:
    Description: 'Subnet name of parent VPC stack based on vpc.yml template.'
    Type: String
    Default: DMZ
    AllowedValues:
    - DMZ
    - Public
    - Private
  Replicas:
    Description: 'Amount of Replicas'
    Type: Number
    Default: '1'
  MinorUpgrade:
    Description: 'Allow Minor Upgrades?'
    Type: String
    Default: 'True'
    AllowedValues:
    - 'True'
    - 'False'
  EngineVersion:
    Description: 'Redis Engine Version'
    Type: String
    Default: '3.2.10'
    AllowedValues:
    - '3.2.10'
    - '3.2.6'
Conditions:
  HasRedisAccessGroup: !Not [!Equals [!Ref RedisAccessGroup, '']]
  HasNotRedisAccessGroup: !Not [!Equals [!Ref RedisAccessCIDR, '']]
Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref Name
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
  SecurityGroupInRedisGroup:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasRedisAccessGroup
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 6379
      ToPort: 6379
      SourceSecurityGroupId: !Ref RedisAccessGroup
  SecurityGroupInRedisWorld:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasNotRedisAccessGroup
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 6379
      ToPort: 6379
      CidrIp: !Ref RedisAccessCIDR
  SubnetGroup:
    Type: "AWS::ElastiCache::SubnetGroup"
    Properties:
      CacheSubnetGroupName: !Ref Name
      Description: 'Redis Subnet Group'
      SubnetIds:
        - 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetA${SubnetName}'
        - 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetB${SubnetName}'
        - 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetC${SubnetName}'
  Redis:
    Type: "AWS::ElastiCache::CacheCluster"
    Properties:
      AutoMinorVersionUpgrade: !Ref MinorUpgrade
      CacheNodeType: !Ref InstanceType
      CacheSubnetGroupName: !Ref SubnetGroup
      ClusterName: !Ref Name
      Engine: Redis
      EngineVersion: !Ref EngineVersion
      NumCacheNodes: !Ref Replicas
      Tags:
      - Key: Name
        Value: !Ref Name
      VpcSecurityGroupIds:
        - !Ref SecurityGroup
Outputs:
  EndpointAddress:
    Description: 'Redis Ingress Endpoint, for applications to point towards.'
    Value: !GetAtt Redis.RedisEndpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-RedisEndpointAddress'
  EndpointPort:
    Description: 'Redis Ingress Port, for applications to point towards.'
    Value: !GetAtt Redis.RedisEndpoint.Port
    Export:
      Name: !Sub '${AWS::StackName}-RedisEndpointPort'
