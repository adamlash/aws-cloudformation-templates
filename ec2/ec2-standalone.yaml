---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2: Standalone EC2 server, Options to allow AWS SSM or Ansible AWX to control build'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentVPCStack
    - Label:
        default: 'EC2 Parameters'
      Parameters:
      - InstanceType
      - AMIID
      - Name
      - SubnetName
      - KeyName
      - SSHAccessGroup
      - SSHAccessCIDR
      - AWXorSSM
      - DataDisk
Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc.yml template.'
    Type: String
  AMIID:
    Description: 'AMI for ASG'
    Type: String
  KeyName:
    Description: '(Optional) AWS Builtin Key pair of the ec2-user to establish a SSH connection to the EC2 instance.'
    Type: String
    Default: ''
  InstanceType:
    Description: 'The instance type for the EC2 instance.'
    Type: String
    Default: 't2.micro'
  Name:
    Description: '(Optional) The name for the EC2 instance.'
    Type: String
    Default: ''
  SSHAccessGroup:
    Description: '(Optional) SSH Access Security Group Name'
    Type: String
    Default: ''
  SSHAccessCIDR:
    Description: '(Optional) SSH Access IP address CIDR, If no SSH Security Group Specified'
    Type: String
    Default: ''
  SubnetName:
    Description: 'Subnet name of parent VPC stack based on vpc.yml template.'
    Type: String
    Default: SubnetAPublic
    AllowedValues:
    - SubnetADMZ
    - SubnetAPublic
    - SubnetAPrivate
    - SubnetBDMZ
    - SubnetBPublic
    - SubnetBPrivate
    - SubnetCDMZ
    - SubnetCPublic
    - SubnetCPrivate
  DataDisk:
    Description: 'Extra EBS volume attached as part of the spin. Specify size of disk or leave blank for no disk.'
    Type: String
    Default: ''
  AWXorSSM:
    Description: 'Is this server going to be managed via Ansible AWX or Amazon SSM'
    Type: String
    Default: SSM
    AllowedValues:
    - AWX
    - SSM
Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
  HasSSHAccessGroup: !Not [!Equals [!Ref SSHAccessGroup, '']]
  HasNotSSHAccessGroup: !Not [!Equals [!Ref SSHAccessCIDR, '']]
  AWXManaged: !Equals [ !Ref AWXorSSM, AWX ]
  SSMManaged: !Equals [ !Ref AWXorSSM, SSM ]
  DiskAttach: !Not [!Equals [!Ref DataDisk, '']]
Resources:
  ElasticIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      InstanceId: !Ref InstanceResource
      Domain: vpc
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref Name
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
  SecurityGroupInSSHGroup:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasSSHAccessGroup
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp:
        'Fn::ImportValue': !Ref SSHAccessGroup
  SecurityGroupInSSHWorld:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasNotSSHAccessGroup
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref SSHAccessCIDR
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
      - !Ref IAMRole
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - !If [AWXManaged, !Ref 'AWS::NoValue', 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM']
  InstanceResource:
    Type: 'AWS::EC2::Instance'
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref AMIID
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
      - !Ref SecurityGroup
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      UserData: !If
      - AWXManaged
      - 'Fn::Base64': !Sub |
           #!/bin/bash -x
           apt-add-repository ppa:ansible/ansible -y
           apt-get update
           apt-get install ansible -y
           cd /tmp
           adduser --disabled-password --gecos "" ad-ansible
           usermod -a -G sudo ad-ansible
           echo "ad-ansible ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/90-cloud-init-users
           mkdir /home/ad-ansible/.ssh
           echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDDXMXE6ct4s62Ddy/CvOzvvn0ZwRXgPMUypqtmowdhmJLA1Iizxhw26fSMnZE+ONpqtxFLH+FImTg6+MLyRIwHCSBznuQ+MTILsil8RLMT1XfxEQduAOBJtFOJmhODFeBWYo71lTFpkVoSkmgOCzCLC1pqHsNaFrinp4s/nipG3PHXGZj5e8yKFwbc4YFrv4GWkdDg0673Oi7hoNakmdOkpPZlJPFnWZTH2JDcEZZ39fLaexGxcTv8f04Hwiac0jT4+wUnAZlmP/TfYqeRT9ArhcE2UFNke2z3i9we4DjVABCOL9nYnYzIPzJdf+YayH2kmmoIPndPRjTRjBsy9NMwyAZftBreAISGgz/4FyeCiYEefq6txj6uRflT6wNgvPAd/uFSoMVqpt337VDIOHNKiL3WPY2fG/0jEDNg4Pg58GocabppP94Cv9dkjH5Cgog921ygptg22jdJVdy+Be+C5a+hg1o5Rhx9Ad396IYX3v/gOoip+1WLlKRZqFylYNvtk7CDXYFZkaIPM9rtz5Q82cYGcGPnwCsKT31INOXBpFvmgbxoC5Xj1KvmD8PY9n5zQsZB6EcTxd32Ya9BecTIwVIIFG00o93rTeGg3nSPtzmbD1HN2tSFf4RtAbBS1uqQlKXa/bawGiIDEKHRpVJZRFHDJ+FD2+Fol+6Z+fqepw== adam.lashh.ansible@gmail.com" >> /home/$user/.ssh/authorized_keys
           apt-get -y install python-pip
           pip install awscli
           pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
           cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource InstanceResource
           cfn-init -v --stack ${AWS::StackName} --resource InstanceResource --region ${AWS::Region}
      - 'Fn::Base64': !Sub |
         #!/bin/bash -x
         apt-add-repository ppa:ansible/ansible -y
         apt-get update
         apt-get install ansible -y
         cd /tmp
         wget https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/debian_amd64/amazon-ssm-agent.deb
         sudo dpkg -i amazon-ssm-agent.deb
         sudo systemctl enable amazon-ssm-agent
         apt-get -y install python-pip
         pip install awscli
         pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
         cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource InstanceResource
         cfn-init -v --stack ${AWS::StackName} --resource InstanceResource --region ${AWS::Region}
      SubnetId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-${SubnetName}'
      Tags:
      - Key: Name
        Value: !Ref Name
      - Key: Management
        Value: !If [AWXManaged, 'AWX', 'SSM']
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
  MountPoint:
    Type: "AWS::EC2::VolumeAttachment"
    Condition: DiskAttach
    Properties:
      InstanceId:
        !Ref InstanceResource
      VolumeId:
        !Ref NewVolume
      Device: /dev/sdh
  NewVolume:
    Type: "AWS::EC2::Volume"
    Condition: DiskAttach
    Properties:
      Size: !Ref DataDisk
      AvailabilityZone:
        !GetAtt InstanceResource.AvailabilityZone
